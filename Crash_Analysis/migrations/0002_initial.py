# Generated by Django 4.2.16 on 2024-12-02 03:55

import django.contrib.gis.db.models.fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("Crash_Analysis", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="Accident",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "state",
                    models.PositiveSmallIntegerField(
                        choices=[
                            ("1", "Alabama"),
                            ("2", "Alaska"),
                            ("4", "Arizona"),
                            ("5", "Arkansas"),
                            ("6", "California"),
                            ("8", "Colorado"),
                            ("9", "Connecticut"),
                            ("10", "Delaware"),
                            ("11", "District of Columbia"),
                            ("12", "Florida"),
                            ("13", "Georgia"),
                            ("15", "Hawaii"),
                            ("16", "Idaho"),
                            ("17", "Illinois"),
                            ("18", "Indiana"),
                            ("19", "Iowa"),
                            ("20", "Kansas"),
                            ("21", "Kentucky"),
                            ("22", "Louisiana"),
                            ("23", "Maine"),
                            ("24", "Maryland"),
                            ("25", "Massachusetts"),
                            ("26", "Michigan"),
                            ("27", "Minnesota"),
                            ("28", "Mississippi"),
                            ("29", "Missouri"),
                            ("30", "Montana"),
                            ("31", "Nebraska"),
                            ("32", "Nevada"),
                            ("33", "New Hampshire"),
                            ("34", "New Jersey"),
                            ("35", "New Mexico"),
                            ("36", "New York"),
                            ("37", "North Carolina"),
                            ("38", "North Dakota"),
                            ("39", "Ohio"),
                            ("40", "Oklahoma"),
                            ("41", "Oregon"),
                            ("42", "Pennsylvania"),
                            ("43", "Puerto Rico"),
                            ("44", "Rhode Island"),
                            ("45", "South Carolina"),
                            ("46", "South Dakota"),
                            ("47", "Tennessee"),
                            ("48", "Texas"),
                            ("49", "Utah"),
                            ("50", "Vermont"),
                            ("51", "Virginia"),
                            ("52", "Virgin Islands"),
                            ("53", "Washington"),
                            ("54", "West Virginia"),
                            ("55", "Wisconsin"),
                            ("56", "Wyoming"),
                        ],
                        verbose_name="State",
                    ),
                ),
                ("st_case", models.PositiveIntegerField(verbose_name="Case Number")),
                (
                    "peds",
                    models.PositiveSmallIntegerField(
                        verbose_name="Number of Forms Submitted for Persons Not in Motor Vehicles"
                    ),
                ),
                (
                    "pernotmvit",
                    models.PositiveSmallIntegerField(
                        verbose_name="Number of Persons Not in Motor Vehicles In-Transport"
                    ),
                ),
                (
                    "ve_total",
                    models.PositiveSmallIntegerField(
                        verbose_name="Number of Vehicle Forms Submitted - All"
                    ),
                ),
                (
                    "ve_forms",
                    models.PositiveSmallIntegerField(
                        verbose_name="Number of Motor Vehicles In-Transport"
                    ),
                ),
                (
                    "pvh_invl",
                    models.PositiveSmallIntegerField(
                        verbose_name="Number of Parked/Working Vehicles"
                    ),
                ),
                (
                    "persons",
                    models.PositiveSmallIntegerField(
                        verbose_name="Number of Person Forms Submitted"
                    ),
                ),
                (
                    "permvit",
                    models.PositiveSmallIntegerField(
                        verbose_name="Number of Persons in Motor Vehicles In-Transport"
                    ),
                ),
                ("county", models.PositiveSmallIntegerField(verbose_name="County")),
                ("city", models.PositiveSmallIntegerField(verbose_name="City")),
                (
                    "datetime",
                    models.DateTimeField(verbose_name="Crash Date/Time (Local)"),
                ),
                ("tway_id", models.CharField(verbose_name="Trafficway Identifier 1")),
                ("tway_id2", models.CharField(verbose_name="Trafficway Identifier 2")),
                (
                    "route",
                    models.PositiveSmallIntegerField(
                        choices=[
                            ("1", "Interstate"),
                            ("2", "U.S. Highway"),
                            ("3", "State Highway"),
                            ("4", "County Road"),
                            ("5", "Local Street - Township"),
                            ("6", "Local Street - Municipality"),
                            ("7", "Local Street - Frontage Road"),
                            ("8", "Other"),
                            ("9", "Unknown"),
                        ],
                        verbose_name="Route Signing",
                    ),
                ),
                (
                    "rur_urb",
                    models.PositiveSmallIntegerField(
                        choices=[
                            ("1", "Rural"),
                            ("2", "Urban"),
                            ("6", "Trafficway Not in State Inventory"),
                            ("8", "Not Reported"),
                            ("9", "Unknown"),
                        ],
                        verbose_name="Land Use",
                    ),
                ),
                (
                    "func_sys",
                    models.PositiveSmallIntegerField(
                        choices=[
                            ("1", "Interstate"),
                            (
                                "2",
                                "Principal Arterial - Other Freeways and Expressways",
                            ),
                            ("3", "Principal Arterial - Other"),
                            ("4", "Minor Arterial"),
                            ("5", "Major Collector"),
                            ("6", "Minor Collector"),
                            ("7", "Local"),
                            ("96", "Trafficway Not in State Inventory"),
                            ("98", "Not Reported"),
                            ("99", "Unknown"),
                        ],
                        verbose_name="Functional System",
                    ),
                ),
                (
                    "rd_owner",
                    models.PositiveSmallIntegerField(
                        choices=[
                            ("1", "State Highway Agency"),
                            ("2", "County Highway Agency"),
                            ("3", "Town or Township Highway Agency"),
                            ("4", "City or Municipal Highway Agency"),
                            ("11", "State Park, Forest or Reservation Agency"),
                            ("12", "Local Park, Forest or Reservation Agency"),
                            ("21", "Other State Agency"),
                            ("25", "Other Local Agency"),
                            ("26", "Private (other than Railroad)"),
                            ("27", "Railroad"),
                            ("31", "State Toll Road"),
                            ("32", "Local Toll Authority"),
                            ("40", "Other Public Instrumentality (i.e., Airport)"),
                            ("50", "Indian Tribe Nation"),
                            ("60", "Other Federal Agency"),
                            ("62", "Bureau of Indian Affairs"),
                            ("63", "Bureau of Fish and Wildlife"),
                            ("64", "U.S. Forest Service"),
                            ("66", "National Park Service"),
                            ("67", "Tennessee Valley Authority"),
                            ("68", "Bureau of Land Management"),
                            ("69", "Bureau of Reclamation"),
                            ("70", "Corps of Engineers"),
                            ("72", "Air Force"),
                            ("74", "Navy/Marines"),
                            ("80", "Army"),
                            ("96", "Trafficway Not in State Inventory"),
                            ("98", "Not Reported"),
                            ("99", "Unknown"),
                        ],
                        verbose_name="Ownership",
                    ),
                ),
                (
                    "nhs",
                    models.PositiveSmallIntegerField(
                        choices=[
                            ("0", "This Section is Not on the National Highway System"),
                            ("1", "This Section is on the National Highway System"),
                            ("9", "Unknown"),
                        ],
                        verbose_name="National Highway System",
                    ),
                ),
                (
                    "sp_jur",
                    models.PositiveSmallIntegerField(
                        choices=[
                            ("0", "No Special Jurisdiction"),
                            ("1", "National Park Service"),
                            ("2", "Military"),
                            ("3", "Indian Reservation"),
                            ("4", "College/University Campus"),
                            ("5", "Other Federal Properties"),
                            ("8", "Other"),
                            ("9", "Unknown"),
                        ],
                        verbose_name="Special Jurisdiction",
                    ),
                ),
                ("milept", models.PositiveIntegerField(verbose_name="Milepoint")),
                (
                    "location",
                    django.contrib.gis.db.models.fields.PointField(
                        srid=4326, verbose_name="Global Position"
                    ),
                ),
                (
                    "harm_ev",
                    models.PositiveSmallIntegerField(
                        choices=[
                            ("1", "Rollover/Overturn"),
                            ("2", "Fire/Explosion"),
                            ("3", "Immersion"),
                            ("4", "Gas Inhalation"),
                            ("5", "Fell/Jumped from Vehicle"),
                            ("6", "Injured in Vehicle (Non-Collision)"),
                            ("7", "Other Non-Collision"),
                            ("8", "Pedestrian"),
                            ("9", "Pedalcyclist"),
                            ("10", "Railway Vehicle"),
                            ("11", "Live Animal"),
                            ("12", "Motor Vehicle in Transport"),
                            ("14", "Parked Motor Vehicle (Not in Transport)"),
                            ("15", "Non-Motorist on Personal Conveyance"),
                            ("16", "Thrown or Falling Object"),
                            ("17", "Boulder"),
                            ("18", "Other Object (Not Fixed)"),
                            ("19", "Building"),
                            ("20", "Impact Attenuator/Crash Cushion"),
                            ("21", "Bridge Pier or Support"),
                            ("23", "Bridge Rail (Includes Parapet)"),
                            ("24", "Guardrail Face"),
                            ("25", "Concrete Traffic Barrier"),
                            ("26", "Other Traffic Barrier"),
                            ("30", "Utility Pole/Light Support"),
                            ("31", "Post, Pole, or Other Supports"),
                            ("32", "Culvert"),
                            ("33", "Curb"),
                            ("34", "Ditch"),
                            ("35", "Embankment"),
                            ("38", "Fence"),
                            ("39", "Wall"),
                            ("40", "Fire Hydrant"),
                            ("41", "Shrubbery"),
                            ("42", "Tree (Standing Only)"),
                            ("43", "Other Fixed Object"),
                            (
                                "44",
                                "Pavement Surface Irregularity (Ruts, Potholes, Grates, etc.)",
                            ),
                            ("45", "Working Motor Vehicle"),
                            ("46", "Traffic Signal Support"),
                            ("48", "Snow Bank"),
                            ("49", "Ridden Animal or Animal-Drawn Conveyance"),
                            ("50", "Bridge Overhead Structure"),
                            ("51", "Jackknife (Harmful to This Vehicle)"),
                            ("52", "Guardrail End"),
                            ("53", "Mail Box"),
                            (
                                "54",
                                "Motor Vehicle In-Transport Strikes or is Struck by Cargo, Persons or Objects Set-in-Motion from/by Another Motor Vehicle In-Transport",
                            ),
                            ("55", "Motor Vehicle in Motion Outside the Trafficway"),
                            ("57", "Cable Barrier"),
                            ("58", "Ground"),
                            ("59", "Traffic Sign Support"),
                            ("72", "Cargo/Equipment Loss or Shift (Harmful)"),
                            (
                                "73",
                                "Object That Had Fallen From Motor Vehicle In-Transport",
                            ),
                            ("74", "Road Vehicle on Rails"),
                            ("91", "Unknown Object Not Fixed"),
                            ("93", "Unknown Fixed Object"),
                            ("99", "Reported as Unknown"),
                        ],
                        verbose_name="First Harmful Event",
                    ),
                ),
                (
                    "man_coll",
                    models.PositiveSmallIntegerField(
                        choices=[
                            (
                                "0",
                                "First Harmful Event was Not a Collision with Motor Vehicle In-Transport",
                            ),
                            ("1", "Front-to-Rear"),
                            ("2", "Front-to-Front"),
                            ("6", "Angle"),
                            ("7", "Sideswipe - Same Direction"),
                            ("8", "Sideswipe - Opposite Direction"),
                            ("9", "Rear-to-Side"),
                            ("10", "Rear-to-Rear"),
                            ("11", "Other (End-Swipes and Others)"),
                            ("98", "Not Reported"),
                            ("99", "Reported as Unknown"),
                        ],
                        verbose_name="Manner of Collision of the First Harmful Event",
                    ),
                ),
                (
                    "reljct1",
                    models.PositiveSmallIntegerField(
                        choices=[
                            ("0", "No"),
                            ("1", "Yes"),
                            ("8", "Not Reported"),
                            ("9", "Reported as Unknown"),
                        ],
                        verbose_name="Relation to Junction - Within Interchange Area",
                    ),
                ),
                (
                    "reljct2",
                    models.PositiveSmallIntegerField(
                        choices=[
                            ("1", "Non-Junction"),
                            ("2", "Intersection"),
                            ("3", "Intersection Related"),
                            ("4", "Driveway Access"),
                            ("5", "Entrance/Exit Ramp Related"),
                            ("6", "Railway Grade Crossing"),
                            ("7", "Crossover Related"),
                            ("8", "Driveway Access Related"),
                            ("16", "Shared-Use Path Crossing"),
                            ("17", "Acceleration/Deceleration Lane"),
                            ("18", "Through Roadway"),
                            ("19", "Other Location Within Interchange Area"),
                            ("20", "Entrance/Exit Ramp"),
                            ("98", "Not Reported"),
                            ("99", "Reported as Unknown"),
                        ],
                        verbose_name="Relation to Junction - Specific Location",
                    ),
                ),
                (
                    "typ_int",
                    models.PositiveSmallIntegerField(
                        choices=[
                            ("1", "Not an Intersection"),
                            ("2", "Four-Way Intersection"),
                            ("3", "T-Intersection"),
                            ("4", "Y-Intersection"),
                            ("5", "Traffic Circle"),
                            ("6", "Roundabout"),
                            ("7", "Five-Point, or More"),
                            ("10", "L-Intersection"),
                            ("11", "Other Intersection Type"),
                            ("98", "Not Reported"),
                            ("99", "Reported as Unknown"),
                        ],
                        verbose_name="Type of Intersection",
                    ),
                ),
                (
                    "rel_road",
                    models.PositiveSmallIntegerField(
                        choices=[
                            ("1", "On Roadway"),
                            ("2", "On Shoulder"),
                            ("3", "On Median"),
                            ("4", "On Roadside"),
                            ("5", "Outside Trafficway"),
                            ("6", "Off Roadway - Location Unknown"),
                            ("7", "In Parking Lane/Zone"),
                            ("8", "Gore"),
                            ("10", "Separator"),
                            ("11", "Continuous Left-Turn Lane"),
                            ("98", "Not Reported"),
                            ("99", "Reported as Unknown"),
                        ],
                        verbose_name="Relation to Trafficway",
                    ),
                ),
                (
                    "wrk_zone",
                    models.PositiveSmallIntegerField(
                        choices=[
                            ("0", "None"),
                            ("1", "Construction"),
                            ("2", "Maintenance"),
                            ("3", "Utility"),
                            ("4", "Work Zone, Type Unknown"),
                        ],
                        verbose_name="Work Zone",
                    ),
                ),
                (
                    "lgt_cond",
                    models.PositiveSmallIntegerField(
                        choices=[
                            ("1", "Daylight"),
                            ("2", "Dark - Not Lighted"),
                            ("3", "Dark - Lighted"),
                            ("4", "Dawn"),
                            ("5", "Dusk"),
                            ("6", "Dark - Unknown Lighting"),
                            ("7", "Other"),
                            ("8", "Not Reported"),
                            ("9", "Reported as Unknown"),
                        ],
                        verbose_name="Light Condition",
                    ),
                ),
                (
                    "weather",
                    models.PositiveSmallIntegerField(
                        choices=[
                            ("1", "Clear"),
                            ("2", "Rain"),
                            ("3", "Sleet, Hail"),
                            ("4", "Snow"),
                            ("5", "Fog, Smog, Smoke"),
                            ("6", "Severe Crosswinds"),
                            ("7", "Blowing Sand, Soil, Dirt"),
                            ("8", "Other"),
                            ("10", "Cloudy"),
                            ("11", "Blowing Snow"),
                            ("12", "Freezing Rain or Drizzle"),
                            ("98", "Not Reported"),
                            ("99", "Unknown"),
                        ],
                        verbose_name="Atmospheric Conditions",
                    ),
                ),
                (
                    "sch_bus",
                    models.PositiveSmallIntegerField(
                        choices=[("0", "No"), ("1", "Yes"), ("8", "Not Reported")],
                        verbose_name="School Bus Related",
                    ),
                ),
                (
                    "rail",
                    models.CharField(verbose_name="Rail Grade Crossing Identifier"),
                ),
                (
                    "not_hour",
                    models.PositiveSmallIntegerField(
                        verbose_name="Hour of Notification"
                    ),
                ),
                (
                    "not_min",
                    models.PositiveSmallIntegerField(
                        verbose_name="Minute of Notification"
                    ),
                ),
                (
                    "not_time",
                    models.TimeField(
                        blank=True, null=True, verbose_name="Notification Time EMS"
                    ),
                ),
                (
                    "arr_hour",
                    models.PositiveSmallIntegerField(
                        verbose_name="Hour of Arrival at Scene"
                    ),
                ),
                (
                    "arr_min",
                    models.PositiveSmallIntegerField(
                        verbose_name="Minute of Arrival at Scene"
                    ),
                ),
                (
                    "arr_time",
                    models.TimeField(
                        blank=True, null=True, verbose_name="Arrival Time EMS"
                    ),
                ),
                (
                    "hosp_hr",
                    models.PositiveSmallIntegerField(
                        verbose_name="Hour of EMS Arrival at Hospital"
                    ),
                ),
                (
                    "hosp_mn",
                    models.PositiveSmallIntegerField(
                        verbose_name="Minute of EMS Arrival at Hospital"
                    ),
                ),
                (
                    "hosp_time",
                    models.TimeField(
                        blank=True, null=True, verbose_name="EMS Time at Hospital"
                    ),
                ),
                ("fatals", models.PositiveSmallIntegerField(verbose_name="Fatalities")),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Vehicle",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "veh_no",
                    models.PositiveSmallIntegerField(verbose_name="Vehicle Number"),
                ),
                (
                    "numoccs",
                    models.PositiveSmallIntegerField(
                        verbose_name="Number of Occupants"
                    ),
                ),
                (
                    "unittype",
                    models.PositiveSmallIntegerField(
                        choices=[
                            (
                                "1",
                                "Motor Vehicle In-Transport (Inside or Outside the Trafficway)",
                            )
                        ],
                        verbose_name="Unit Type",
                    ),
                ),
                (
                    "hit_run",
                    models.PositiveSmallIntegerField(
                        choices=[("0", "No"), ("1", "Yes"), ("8", "Not Reported")],
                        verbose_name="Hit-and-Run",
                    ),
                ),
                (
                    "reg_stat",
                    models.PositiveSmallIntegerField(
                        choices=[
                            ("0", "Not Applicable"),
                            ("1", "Alabama"),
                            ("2", "Alaska"),
                            ("4", "Arizona"),
                            ("5", "Arkansas"),
                            ("6", "California"),
                            ("8", "Colorado"),
                            ("9", "Connecticut"),
                            ("10", "Delaware"),
                            ("11", "District of Columbia"),
                            ("12", "Florida"),
                            ("13", "Georgia"),
                            ("15", "Hawaii"),
                            ("16", "Idaho"),
                            ("17", "Illinois"),
                            ("18", "Indiana"),
                            ("19", "Iowa"),
                            ("20", "Kansas"),
                            ("21", "Kentucky"),
                            ("22", "Louisiana"),
                            ("23", "Maine"),
                            ("24", "Maryland"),
                            ("25", "Massachusetts"),
                            ("26", "Michigan"),
                            ("27", "Minnesota"),
                            ("28", "Mississippi"),
                            ("29", "Missouri"),
                            ("30", "Montana"),
                            ("31", "Nebraska"),
                            ("32", "Nevada"),
                            ("33", "New Hampshire"),
                            ("34", "New Jersey"),
                            ("35", "New Mexico"),
                            ("36", "New York"),
                            ("37", "North Carolina"),
                            ("38", "North Dakota"),
                            ("39", "Ohio"),
                            ("40", "Oklahoma"),
                            ("41", "Oregon"),
                            ("42", "Pennsylvania"),
                            ("43", "Puerto Rico"),
                            ("44", "Rhode Island"),
                            ("45", "South Carolina"),
                            ("46", "South Dakota"),
                            ("47", "Tennessee"),
                            ("48", "Texas"),
                            ("49", "Utah"),
                            ("50", "Vermont"),
                            ("51", "Virginia"),
                            ("52", "Virgin Islands"),
                            ("53", "Washington"),
                            ("54", "West Virginia"),
                            ("55", "Wisconsin"),
                            ("56", "Wyoming"),
                            ("91", "Not Reported"),
                            ("92", "No Registration"),
                            ("93", "Multiple State Registrations"),
                            ("94", "U.S. Government Tags (Includes Military)"),
                            ("95", "Canada"),
                            ("96", "Mexico"),
                            ("97", "Other Foreign Country"),
                            ("98", "Other Registration"),
                            ("99", "Unknown/Reported as Unknown (Since 2018)"),
                        ],
                        verbose_name="Registration State",
                    ),
                ),
                (
                    "owner",
                    models.PositiveSmallIntegerField(
                        choices=[
                            ("0", "Not Applicable, Vehicle Not Registered"),
                            ("1", "Driver (in This Crash) Was Registered Owner"),
                            (
                                "2",
                                "Driver (in This Crash) Not Registered Owner (Other Private Owner)",
                            ),
                            (
                                "3",
                                "Vehicle Registered as Commercial/Business/Company/Government Vehicle",
                            ),
                            ("4", "Vehicle Registered as Rental Vehicle"),
                            ("5", "Vehicle Was Stolen (Reported by Police)"),
                            (
                                "6",
                                "Driverless/Motor Vehicle Parked/Stopped off Roadway",
                            ),
                            ("9", "Unknown"),
                        ],
                        verbose_name="Registered Vehicle Owner",
                    ),
                ),
                (
                    "make",
                    models.PositiveSmallIntegerField(
                        choices=[
                            ("1", "American Motors"),
                            ("2", "Jeep/Kaiser-Jeep/Willys Jeep"),
                            ("3", "AM General"),
                            ("6", "Chrysler"),
                            ("7", "Dodge"),
                            ("8", "Imperial"),
                            ("9", "Plymouth"),
                            ("10", "Eagle"),
                            ("12", "Ford"),
                            ("13", "Lincoln"),
                            ("14", "Mercury"),
                            ("18", "Buick/Opel"),
                            ("19", "Cadillac"),
                            ("20", "Chevrolet"),
                            ("21", "Oldsmobile"),
                            ("22", "Pontiac"),
                            ("23", "GMC"),
                            ("24", "Saturn"),
                            ("25", "Grumman"),
                            ("26", "Coda (Since 2013)"),
                            ("29", "Other Domestic"),
                            ("30", "Volkswagen"),
                            ("31", "Alfa Romeo"),
                            ("32", "Audi"),
                            ("33", "Austin/Austin Healey"),
                            ("34", "BMW"),
                            ("35", "Datsun/Nissan"),
                            ("36", "Fiat"),
                            ("37", "Honda"),
                            ("38", "Isuzu"),
                            ("39", "Jaguar"),
                            ("40", "Lancia"),
                            ("41", "Mazda"),
                            ("42", "Mercedes-Benz"),
                            ("43", "MG"),
                            ("44", "Peugeot"),
                            ("45", "Porsche"),
                            ("46", "Renault"),
                            ("47", "Saab"),
                            ("48", "Subaru"),
                            ("49", "Toyota"),
                            ("50", "Triumph"),
                            ("51", "Volvo"),
                            ("52", "Mitsubishi"),
                            ("53", "Suzuki"),
                            ("54", "Acura"),
                            ("55", "Hyundai"),
                            ("56", "Merkur"),
                            ("57", "Yugo"),
                            ("58", "Infiniti"),
                            ("59", "Lexus"),
                            ("60", "Daihatsu"),
                            ("61", "Sterling"),
                            ("62", "Land Rover"),
                            ("63", "Kia"),
                            ("64", "Daewoo"),
                            ("65", "Smart (Since 2010)"),
                            ("66", "Mahindra (2011-2013)"),
                            ("67", "Scion (Since 2012)"),
                            ("69", "Other Imports"),
                            ("70", "BSA"),
                            ("71", "Ducati"),
                            ("72", "Harley-Davidson"),
                            ("73", "Kawasaki"),
                            ("74", "Moto Guzzi"),
                            ("75", "Norton"),
                            ("76", "Yamaha"),
                            ("77", "Victory"),
                            ("78", "Other Make Moped (Since 2010)"),
                            ("79", "Other Make Motored Cycle (Since 2010)"),
                            ("80", "Brockway"),
                            ("81", "Diamond Reo/Reo"),
                            ("82", "Freightliner"),
                            ("83", "FWD"),
                            ("84", "International Harvester/Navistar"),
                            ("85", "Kenworth"),
                            ("86", "Mack"),
                            ("87", "Peterbilt"),
                            ("88", "Iveco/Magirus"),
                            ("89", "White/Autocar, White/GMC"),
                            ("90", "Bluebird"),
                            ("91", "Eagle Coach"),
                            ("92", "Gillig"),
                            ("93", "MCI"),
                            ("94", "Thomas Built"),
                            ("97", "Not Reported (Since 2010)"),
                            ("98", "Other Make"),
                            ("99", "Unknown Make"),
                        ],
                        verbose_name="NSCA Make",
                    ),
                ),
                ("model", models.PositiveSmallIntegerField(verbose_name="NSCA Model")),
                (
                    "body_typ",
                    models.PositiveSmallIntegerField(
                        choices=[
                            ("1", "Convertible"),
                            ("2", "2-Door Sedan/Hardtop/Coupe"),
                            ("3", "3-Door/2-Door Hatchback"),
                            ("4", "4-Door Sedan/Hardtop"),
                            ("5", "5-Door/4-Door Hatchback"),
                            ("6", "Station Wagon"),
                            ("7", "Hacthback, Number of Doors Unknown"),
                            ("8", "Sedan/Hardtop, Number of Doors Unknown"),
                            ("9", "Other or Unknown Automobile Type"),
                            ("10", "Auto-Based Pickup"),
                            ("11", "Auto-Based Panel"),
                            (
                                "12",
                                "Large Limousine - More Than Four Side Doors or Stretch Chassis",
                            ),
                            ("13", "Three-Wheel Automobile or Automobile Derivative"),
                            ("14", "Compact Utility"),
                            ("15", "Large Utility"),
                            ("16", "Utility Station Wagon"),
                            ("17", "3-Door Coupe"),
                            ("19", "Utility Unknown Body"),
                            ("20", "Minivan"),
                            ("21", "Large Van - Includes Van-Based Buses"),
                            ("22", "Step Van or Walk-In Van"),
                            ("28", "Other Van Type"),
                            ("29", "Unknown Van Type"),
                            ("33", "Convertible Pickup"),
                            ("34", "Light Pickup"),
                            ("39", "Unknown Light Conventional Truck Type"),
                            ("40", "Cab Chassis-Based"),
                            ("41", "Truck-Based Panel"),
                            ("42", "Light Vehicle-Based Motorhome (Chassis Mounted)"),
                            ("45", "Other Light Conventional Truck Type"),
                            ("48", "Unknown Light Truck Type"),
                            ("49", "Unknown Light-Vehicle Type"),
                            ("50", "School Bus"),
                            ("51", "Cross-Country/Intercity Bus"),
                            ("52", "Transit Bus"),
                            ("55", "Van-Based Bus"),
                            ("58", "Other Bus Type"),
                            ("59", "Unknown Bus Type"),
                            ("60", "Step Van"),
                            (
                                "61",
                                "Single-Unit Straight Truck or Cab-Chassis (GVWR range 10,001 to 19,500 lbs)",
                            ),
                            (
                                "62",
                                "Single-Unit Straight Truck or Cab-Chassis (GVWR range 19,501 to 26,000 lbs)",
                            ),
                            (
                                "63",
                                "Single-Unit Straight Truck or Cab-Chassis (GVWR > 26,000 lbs)",
                            ),
                            (
                                "64",
                                "Single-Unit Straight Truck or Cab-Chassis (GVWR Unknown)",
                            ),
                            ("65", "Medium/Heavy Vehicle-Based Motorhome"),
                            ("66", "Truck/Tractor"),
                            ("67", "Medium/Heavy Pickup"),
                            (
                                "71",
                                "Unknown if Single-Unit or Combination-Unit Medium Truck",
                            ),
                            (
                                "72",
                                "Unknown if Single-Unit or Combination-Unit Heavy Truck",
                            ),
                            ("73", "Camper or Motorhome, Unknown GVWR"),
                            ("78", "Unknown Medium/Heavy Truck Type"),
                            ("79", "Unknown Truck Type"),
                            ("80", "Two Wheel Motorcycle"),
                            ("81", "Moped or Motorized Bicycle"),
                            ("82", "Three-Wheel Motorcycle"),
                            ("83", "Off-Road Motorcycle"),
                            ("84", "Motor Scooter"),
                            (
                                "85",
                                "Unenclosed 3-Wheel Motorcycle/Unenclosed Autocycle",
                            ),
                            ("86", "Enclosed 3-Wheel Motorcycle/Unenclosed Autocycle"),
                            ("87", "Unknown Three Wheel Motorcycle Type"),
                            ("88", "Other Motored Cycle Type"),
                            ("89", "Unknown Motored Cycle Type"),
                            ("90", "ATV"),
                            ("91", "Snowmobile"),
                            ("92", "Farm Equipment Other Than Trucks"),
                            ("93", "Construction Equipment Other Than Trucks"),
                            ("94", "Low Speed Vehicle/Neighborhood Electric Vehicle"),
                            ("95", "Golf Cart"),
                            ("96", "Recreational Off-Highway Vehicle"),
                            ("97", "Other Vehicle Type"),
                            ("98", "Not Reported"),
                            ("99", "Unknown Body Type"),
                        ],
                        verbose_name="NSCA Body Type",
                    ),
                ),
                (
                    "mod_year",
                    models.PositiveSmallIntegerField(verbose_name="Vehicle Model Year"),
                ),
                ("vin", models.CharField(verbose_name="Vehicle Identification Number")),
                (
                    "tow_veh",
                    models.PositiveSmallIntegerField(
                        choices=[
                            ("0", "No Trailers"),
                            ("1", "One Trailer"),
                            ("2", "Two Trailers"),
                            ("3", "Three or More Trailers"),
                            ("4", "Yes, Number of Trailers Unknown"),
                            (
                                "5",
                                "Vehicle Towing another Motor Vehicle - Fixed Linkage",
                            ),
                            (
                                "6",
                                "Vehicle Towing another Motor Vehicle - Non-Fixed Linkage",
                            ),
                            (
                                "7",
                                "Trailing Unit Other than a Trailer or Another Motor Vehicle",
                            ),
                            ("9", "Unknown"),
                        ],
                        verbose_name="Vehicle Trailing",
                    ),
                ),
                (
                    "j_knife",
                    models.PositiveSmallIntegerField(
                        choices=[
                            ("0", "Not an Articulated Vehicle"),
                            ("1", "No"),
                            ("2", "Yes, First Event"),
                            ("3", "Yes, Subsequent Event"),
                        ],
                        verbose_name="Jackknife",
                    ),
                ),
                (
                    "mcarr_id",
                    models.CharField(
                        verbose_name="Motor Carrier Identification Number"
                    ),
                ),
                (
                    "v_config",
                    models.PositiveSmallIntegerField(
                        choices=[
                            ("0", "Not Applicable"),
                            (
                                "1",
                                "Single-Unit Truck (2 Axles and GVWR More Than 10,000 lbs)",
                            ),
                            ("2", "Single-Unit Truck (3 or More Axles)"),
                            ("4", "Truck Pulling Trailer(s)"),
                            ("5", "Truck Tractor (Bobtail)"),
                            ("6", "Truck Tractor/Semi-Trailer"),
                            ("7", "Truck Tractor/Double"),
                            ("8", "Truck Tractor/Triple"),
                            (
                                "10",
                                "Vehicle 10,000 lbs. or Less Placarded for Hazardous Materials",
                            ),
                            ("19", "Vehicle More Than 10,000 lbs., Other"),
                            (
                                "20",
                                "Bus/Large Van (Seats for 9-15 Occupants, Including Driver)",
                            ),
                            (
                                "21",
                                "Bus (Seats for More Than 15 Occupants, Including Driver, 2010-Later)",
                            ),
                            (
                                "70",
                                "Light Truck (Van, Mini-Van, Panel, Pickup, Sport Utility Vehicle Displaying a Hazardous Materials Placard)",
                            ),
                            (
                                "80",
                                "Passenger Car (Only When Displaying a Hazardous Materials Placard)",
                            ),
                            ("88", "Qualifying Vehicle, Unknown Configuration"),
                            ("98", "Not Reported"),
                            ("99", "Unknown"),
                        ],
                        verbose_name="Vehicle Configuration",
                    ),
                ),
                (
                    "cargo_bt",
                    models.PositiveSmallIntegerField(
                        choices=[
                            ("0", "Not Applicable"),
                            ("1", "Van/Enclosed Box"),
                            ("2", "Cargo Tank"),
                            ("3", "Flatbed"),
                            ("4", "Dump"),
                            ("5", "Concrete Mixer"),
                            ("6", "Auto Transporter"),
                            ("7", "Garbage/Refuse"),
                            ("8", "Grain/Chips/Gravel"),
                            ("9", "Pole-Trailer"),
                            ("10", "Log (Since 2007)"),
                            ("11", "Intermodal Container Chassis"),
                            ("12", "Vehicle Towing Another Motor Vehicle (Since 2007)"),
                            ("22", "Bus"),
                            ("28", "Not Reported (2010-2012)"),
                            ("96", "No Cargo Body Type"),
                            ("97", "Other"),
                            ("98", "Unknown Cargo Body Type"),
                            ("99", "Unknown"),
                        ],
                        verbose_name="Cargo Body Type",
                    ),
                ),
                (
                    "haz_inv",
                    models.PositiveSmallIntegerField(
                        choices=[("1", "No"), ("2", "Yes")],
                        verbose_name="Hazardous Material Involvement",
                    ),
                ),
                (
                    "haz_plac",
                    models.PositiveSmallIntegerField(
                        choices=[
                            ("0", "Not Applicable"),
                            ("1", "No"),
                            ("2", "Yes"),
                            ("8", "Not Reported"),
                        ],
                        verbose_name="Hazardous Material Placard",
                    ),
                ),
                ("haz_id", models.PositiveSmallIntegerField()),
                ("haz_cno", models.PositiveSmallIntegerField()),
                ("haz_rel", models.PositiveSmallIntegerField()),
                ("bus_use", models.PositiveSmallIntegerField()),
                ("spec_use", models.PositiveSmallIntegerField()),
                ("emer_use", models.PositiveSmallIntegerField()),
                ("trav_sp", models.PositiveSmallIntegerField()),
                ("underoverride", models.PositiveSmallIntegerField()),
                ("rollover", models.PositiveSmallIntegerField()),
                ("rolinloc", models.PositiveSmallIntegerField()),
                ("impact1", models.PositiveSmallIntegerField()),
                ("deformed", models.PositiveSmallIntegerField()),
                ("towed", models.PositiveSmallIntegerField()),
                ("m_harm", models.PositiveSmallIntegerField()),
                ("fire_exp", models.PositiveSmallIntegerField()),
                ("dr_pres", models.PositiveSmallIntegerField()),
                ("l_state", models.PositiveSmallIntegerField()),
                ("dr_zip", models.PositiveIntegerField()),
                ("l_status", models.PositiveSmallIntegerField()),
                ("l_type", models.PositiveSmallIntegerField()),
                ("cdl_stat", models.PositiveSmallIntegerField()),
                ("l_endors", models.PositiveSmallIntegerField()),
                ("l_compl", models.PositiveSmallIntegerField()),
                ("l_restri", models.PositiveSmallIntegerField()),
                ("dr_hgt", models.PositiveSmallIntegerField()),
                ("dr_wgt", models.PositiveSmallIntegerField()),
                ("prev_acc", models.PositiveSmallIntegerField()),
                ("prev_sus1", models.PositiveSmallIntegerField()),
                ("prev_sus2", models.PositiveSmallIntegerField()),
                ("prev_sus3", models.PositiveSmallIntegerField()),
                ("prev_dwi", models.PositiveSmallIntegerField()),
                ("prev_spd", models.PositiveSmallIntegerField()),
                ("prev_oth", models.PositiveSmallIntegerField()),
                ("first_mo", models.PositiveSmallIntegerField()),
                ("first_yr", models.PositiveSmallIntegerField()),
                ("last_mo", models.PositiveSmallIntegerField()),
                ("last_yr", models.PositiveSmallIntegerField()),
                ("speedrel", models.PositiveSmallIntegerField()),
                ("vtrafway", models.PositiveSmallIntegerField()),
                ("vnum_lan", models.PositiveSmallIntegerField()),
                ("vspd_lim", models.PositiveSmallIntegerField()),
                ("valign", models.PositiveSmallIntegerField()),
                ("vprofile", models.PositiveSmallIntegerField()),
                ("vpavetyp", models.PositiveSmallIntegerField()),
                ("vsurcond", models.PositiveSmallIntegerField()),
                ("vtrafcon", models.PositiveSmallIntegerField()),
                ("vtcont_f", models.PositiveSmallIntegerField()),
                ("p_crash1", models.PositiveSmallIntegerField()),
                ("p_crash2", models.PositiveSmallIntegerField()),
                ("p_crash3", models.PositiveSmallIntegerField()),
                ("pcrash4", models.PositiveSmallIntegerField()),
                ("pcrash5", models.PositiveSmallIntegerField()),
                ("acc_type", models.PositiveSmallIntegerField()),
                ("trlr1vin", models.CharField()),
                ("trlr2vin", models.CharField()),
                ("trlr3vin", models.CharField()),
                ("deaths", models.PositiveSmallIntegerField()),
                ("dr_drink", models.PositiveSmallIntegerField()),
                ("vpicmake", models.PositiveIntegerField(verbose_name="vPIC Model")),
                ("vpicmodel", models.PositiveIntegerField(verbose_name="vPIC Make")),
                (
                    "vpicbodyclass",
                    models.PositiveSmallIntegerField(
                        choices=[
                            ("1", "Convertible/Cabriolet"),
                            ("2", "Minivan"),
                            ("3", "Coupe"),
                            (
                                "4",
                                "Low Speed Vehicle (LSV)/Neighborhood Electric Vehicle (NEV)",
                            ),
                            ("5", "Hatchback/Liftback/Notchback"),
                            ("6", "Motorcycle - Standard"),
                            (
                                "7",
                                "Sport Utility Vehicle (SUV)/Multi-Purpose Vehicle (MPV)",
                            ),
                            ("8", "Crossover Utility Vehicle (CUV)"),
                            ("9", "Van"),
                            ("10", "Roadster"),
                            ("11", "Truck"),
                            ("12", "Motorcycle - Scooter"),
                            ("13", "Sedan/Saloon"),
                            ("15", "Wagon"),
                            ("16", "Bus"),
                            ("60", "Pickup"),
                            ("62", "Incomplete - Cutaway*"),
                            ("63", "Incomplete - Chassis Cab (Single Cab)*"),
                            ("64", "Incomplete - Glider*"),
                            ("65", "Incomplete*"),
                            ("66", "Truck-Tractor"),
                            ("67", "Incomplete - Stripped Chassis*"),
                            ("68", "Streetcar/Trolley"),
                            (
                                "69",
                                "Off-Road Vehicle - All Terrain Vehicle (ATV) (Motorcycle-Style)",
                            ),
                            ("70", "Incomplete - Chassis Cab (Double Cab)*"),
                            ("71", "Incomplete - School Bus Chassis*"),
                            ("72", "Incomplete - Commercial Bus Chassis*"),
                            ("73", "Bus - School Bus"),
                            ("74", "Incomplete - Chassis Cab (Number of Cab Unknown)*"),
                            ("75", "Incomplete - Transit Bus Chassis*"),
                            ("76", "Incomplete - Motor Coach Chassis*"),
                            ("77", "Incomplete - Shuttle Bus Chassis*"),
                            ("78", "Incomplete - Motor Home Chassis*"),
                            ("80", "Motorcycle - Sport"),
                            ("81", "Motorcycle - Touring/Sport Touring"),
                            ("82", "Motorcycle - Cruiser"),
                            ("83", "Motorcycle - Trike"),
                            ("84", "Off-Road Vehicle - Dirt Bike/Off-Road"),
                            (
                                "85",
                                "Motorcycle - Dual Sport/Adventure/Supermoto/On/Off-Road",
                            ),
                            (
                                "86",
                                "Off-Road Vehicle - Enduro (off-road long-distance racing)",
                            ),
                            ("87", "Motorcycle - Small/Minibike"),
                            ("88", "Off-Road Vehicle - Go Kart"),
                            ("90", "Motorcycle - Side Car"),
                            ("94", "Motorcycle - Custom"),
                            ("95", "Cargo Van"),
                            ("97", "Off-Road Vehicle - Snowmobile"),
                            ("98", "Motorcycle - Street"),
                            (
                                "100",
                                "Motorcycle - Enclosed Three Wheeled/Enclosed Autocycle",
                            ),
                            (
                                "103",
                                "Motorcycle - Unenclosed Three Wheeled/Open Autocycle",
                            ),
                            ("104", "Motorcycle - Moped"),
                            (
                                "105",
                                "Off-Road Vehicle - Recreational Off-Road Vehicle (ROV)",
                            ),
                            ("107", "Incomplete - Bus Chassis*"),
                            ("108", "Motorhome"),
                            ("109", "Motorcycle - Cross Country"),
                            ("110", "Motorcycle - Underbone"),
                            ("111", "Step Van/Walk-in Van"),
                            ("112", "Incomplete - Commercial Chassis*"),
                            (
                                "113",
                                "Off-Road Vehicle - Motocross (Off-Road Short-Distance, Closed-Track Racing)",
                            ),
                            ("114", "Motorcycle - Competition"),
                            ("117", "Limousine"),
                            ("119", "Sport Utility Truck (SUT)"),
                            ("124", "Off-Road Vehicle - Golf Cart"),
                            ("125", "Motorcycle - Unknown Body Type"),
                            ("126", "Off-Road Vehicle - Farm Equipment"),
                            ("127", "Off-Road Vehicle - Construction Equipment"),
                            ("996", "Motorized Bicycle (discontinued in 2022)"),
                            ("997", "Other"),
                            ("998", "Not Reported"),
                            ("999", "Unknown"),
                        ],
                        verbose_name="vPIC Body Class",
                    ),
                ),
                (
                    "icfinalbody",
                    models.PositiveSmallIntegerField(
                        choices=[
                            ("0", "Not Applicable"),
                            ("2", "Minivan"),
                            ("4", "Low-Speed Vehicle (LSV)"),
                            (
                                "7",
                                "Sport Utility Vehicle (SUV)/Multi-Purpose Vehicle (MPV)",
                            ),
                            ("8", "Crossover Utility Vehicle (CUV)"),
                            ("9", "Van"),
                            ("11", "Truck"),
                            ("15", "Wagon"),
                            ("16", "Bus"),
                            ("60", "Pickup"),
                            ("66", "Truck-Tractor"),
                            ("68", "Streetcar/Trolley"),
                            ("73", "Bus-School Bus"),
                            ("95", "Cargo Van"),
                            ("108", "Motorhome"),
                            ("111", "Step Van/Walk-in Van"),
                            ("117", "Limousine"),
                            ("119", "Sport Utility Truck"),
                            ("128", "Ambulance"),
                            ("129", "Street Sweeper"),
                            ("130", "Fire Apparatus"),
                            ("997", "Other"),
                            ("998", "Not Reported"),
                            ("999", "Unknown"),
                        ],
                        verbose_name="Final Stage Body Class",
                    ),
                ),
                (
                    "gvwr_from",
                    models.PositiveSmallIntegerField(
                        choices=[
                            ("0", "No Trailer GVWR Required"),
                            ("11", "Class 1: 6,000 lbs or less (2,722 kg or less)"),
                            ("12", "Class 2: 6,001 - 10,000 lbs (2,722 - 4,536 kg)"),
                            ("13", "Class 3: 10,001 - 14,000 lbs (4,536 - 6,350 kg)"),
                            ("14", "Class 4: 14,001 - 16,000 lbs (6,350 - 7,258 kg)"),
                            ("15", "Class 5: 16,001 - 19,500 lbs (7,258 - 8,845 kg)"),
                            ("16", "Class 6: 19,501 - 26,000 lbs (8,845 - 11,794 kg)"),
                            ("17", "Class 7: 26,001 - 33,000 lbs (11,794 - 14,969 kg)"),
                            (
                                "18",
                                "Class 8: 33,001 lbs and above (14,969 kg and above)",
                            ),
                            ("77", "No Trailing Units"),
                            ("98", "Not Reported"),
                            ("99", "Reported as Unknown"),
                        ],
                        verbose_name="Power Unit Gross Vehicle Weight Rating - Lowest",
                    ),
                ),
                (
                    "gvwr_to",
                    models.PositiveSmallIntegerField(
                        choices=[
                            ("0", "No Trailer GVWR Required"),
                            ("11", "Class 1: 6,000 lbs or less (2,722 kg or less)"),
                            ("12", "Class 2: 6,001 - 10,000 lbs (2,722 - 4,536 kg)"),
                            ("13", "Class 3: 10,001 - 14,000 lbs (4,536 - 6,350 kg)"),
                            ("14", "Class 4: 14,001 - 16,000 lbs (6,350 - 7,258 kg)"),
                            ("15", "Class 5: 16,001 - 19,500 lbs (7,258 - 8,845 kg)"),
                            ("16", "Class 6: 19,501 - 26,000 lbs (8,845 - 11,794 kg)"),
                            ("17", "Class 7: 26,001 - 33,000 lbs (11,794 - 14,969 kg)"),
                            (
                                "18",
                                "Class 8: 33,001 lbs and above (14,969 kg and above)",
                            ),
                            ("77", "No Trailing Units"),
                            ("98", "Not Reported"),
                            ("99", "Reported as Unknown"),
                        ],
                        verbose_name="Power Unit Gross Vehicle Weight Rating - Highest",
                    ),
                ),
                (
                    "trlr1gvwr",
                    models.PositiveSmallIntegerField(
                        choices=[
                            ("0", "No Trailer GVWR Required"),
                            ("11", "Class 1: 6,000 lbs or less (2,722 kg or less)"),
                            ("12", "Class 2: 6,001 - 10,000 lbs (2,722 - 4,536 kg)"),
                            ("13", "Class 3: 10,001 - 14,000 lbs (4,536 - 6,350 kg)"),
                            ("14", "Class 4: 14,001 - 16,000 lbs (6,350 - 7,258 kg)"),
                            ("15", "Class 5: 16,001 - 19,500 lbs (7,258 - 8,845 kg)"),
                            ("16", "Class 6: 19,501 - 26,000 lbs (8,845 - 11,794 kg)"),
                            ("17", "Class 7: 26,001 - 33,000 lbs (11,794 - 14,969 kg)"),
                            (
                                "18",
                                "Class 8: 33,001 lbs and above (14,969 kg and above)",
                            ),
                            ("77", "No Trailing Units"),
                            ("98", "Not Reported"),
                            ("99", "Reported as Unknown"),
                        ],
                        verbose_name="Trailer Gross Vehicle Weight Rating 1",
                    ),
                ),
                (
                    "trlr2gvwr",
                    models.PositiveSmallIntegerField(
                        choices=[
                            ("0", "No Trailer GVWR Required"),
                            ("11", "Class 1: 6,000 lbs or less (2,722 kg or less)"),
                            ("12", "Class 2: 6,001 - 10,000 lbs (2,722 - 4,536 kg)"),
                            ("13", "Class 3: 10,001 - 14,000 lbs (4,536 - 6,350 kg)"),
                            ("14", "Class 4: 14,001 - 16,000 lbs (6,350 - 7,258 kg)"),
                            ("15", "Class 5: 16,001 - 19,500 lbs (7,258 - 8,845 kg)"),
                            ("16", "Class 6: 19,501 - 26,000 lbs (8,845 - 11,794 kg)"),
                            ("17", "Class 7: 26,001 - 33,000 lbs (11,794 - 14,969 kg)"),
                            (
                                "18",
                                "Class 8: 33,001 lbs and above (14,969 kg and above)",
                            ),
                            ("77", "No Trailing Units"),
                            ("98", "Not Reported"),
                            ("99", "Reported as Unknown"),
                        ],
                        verbose_name="Trailer Gross Vehicle Weight Rating 2",
                    ),
                ),
                (
                    "trlr3gvwr",
                    models.PositiveSmallIntegerField(
                        choices=[
                            ("0", "No Trailer GVWR Required"),
                            ("11", "Class 1: 6,000 lbs or less (2,722 kg or less)"),
                            ("12", "Class 2: 6,001 - 10,000 lbs (2,722 - 4,536 kg)"),
                            ("13", "Class 3: 10,001 - 14,000 lbs (4,536 - 6,350 kg)"),
                            ("14", "Class 4: 14,001 - 16,000 lbs (6,350 - 7,258 kg)"),
                            ("15", "Class 5: 16,001 - 19,500 lbs (7,258 - 8,845 kg)"),
                            ("16", "Class 6: 19,501 - 26,000 lbs (8,845 - 11,794 kg)"),
                            ("17", "Class 7: 26,001 - 33,000 lbs (11,794 - 14,969 kg)"),
                            (
                                "18",
                                "Class 8: 33,001 lbs and above (14,969 kg and above)",
                            ),
                            ("77", "No Trailing Units"),
                            ("98", "Not Reported"),
                            ("99", "Reported as Unknown"),
                        ],
                        verbose_name="Trailer Gross Vehicle Weight Rating 3",
                    ),
                ),
                (
                    "st_case",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="Crash_Analysis.accident",
                        verbose_name="Case Number",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Person",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("age", models.PositiveSmallIntegerField(verbose_name="Age")),
                ("sex", models.PositiveSmallIntegerField(verbose_name="Sex/Gender")),
                ("per_typ", models.PositiveSmallIntegerField()),
                ("inj_sev", models.PositiveSmallIntegerField()),
                ("seat_pos", models.PositiveSmallIntegerField()),
                ("rest_use", models.PositiveSmallIntegerField()),
                ("rest_mis", models.PositiveSmallIntegerField()),
                ("helm_use", models.PositiveSmallIntegerField()),
                ("helm_mis", models.PositiveSmallIntegerField()),
                ("air_bag", models.PositiveSmallIntegerField()),
                ("ejection", models.PositiveSmallIntegerField()),
                ("ej_path", models.PositiveSmallIntegerField()),
                ("extricat", models.PositiveSmallIntegerField()),
                ("drinking", models.PositiveSmallIntegerField()),
                ("alc_status", models.PositiveSmallIntegerField()),
                ("atst_typ", models.PositiveSmallIntegerField()),
                ("alc_res", models.PositiveSmallIntegerField()),
                ("drugs", models.PositiveSmallIntegerField()),
                ("dstatus", models.PositiveSmallIntegerField()),
                ("hospital", models.PositiveSmallIntegerField()),
                ("doa", models.PositiveSmallIntegerField()),
                ("death_datetime", models.DateTimeField(blank=True, null=True)),
                ("lag_hrs", models.PositiveSmallIntegerField()),
                ("lag_mins", models.PositiveSmallIntegerField()),
                ("str_veh", models.PositiveSmallIntegerField()),
                ("location", models.PositiveSmallIntegerField()),
                ("work_inj", models.PositiveSmallIntegerField()),
                ("hispanic", models.PositiveSmallIntegerField()),
                ("devtype", models.PositiveSmallIntegerField(blank=True, null=True)),
                ("devmotor", models.PositiveSmallIntegerField(blank=True, null=True)),
                (
                    "st_case",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="Crash_Analysis.accident",
                        verbose_name="Case Number",
                    ),
                ),
                (
                    "veh_no",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="Crash_Analysis.vehicle",
                        verbose_name="Vehicle",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
    ]
